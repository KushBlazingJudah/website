#!/bin/sh -e

# Awfully written script to build the website and place the results in _out.
# Passes shellcheck.

COPY="index.html style.css key.asc favicon.ico media"
PROCESS="software.md thoughts.md"
ARTICLES="articles"
OUT="_out"

filter_placeholders() {
	sed \
		-e "s|%%title%%|$1|" \
		-e "s|%%desc%%|$2|" \
		-e "s|%%commit%%|$3|" \
		-e "s|%%date%%|$4|" \
		-e "s|%%file%%|/$5|"
}

process() {
	# $1: file path
	# $2: file output

	title="$(lowdown -X title "$1" 2>/dev/null || printf 'Untitled')"
	desc="$(lowdown -X desc "$1" 2>/dev/null || printf 'No description.')"

	commit="unavailable"
	commit_date="unavailable"
	if git ls-files --error-unmatch "$file" >/dev/null 2>&1; then
	       commit=$(git log -n 1 --pretty=format:%H -- "$file" 2>/dev/null)
	       commit_date=$(git log -n 1 --pretty=format:%as -- "$file" 2/dev/null)
	fi

	# This isn't a great solution but hey, it works
	lowdown -Thtml "$1" | cat _header.html - _footer.html | filter_placeholders "$title" "$desc" "$commit" "$commit_date" "$1"
}

add_catalogue() {
	printf '<li><a href="%s">[%s] %s</a></li>\n' "${1%.*}.html" "$(lowdown -X date "$1" 2>/dev/null || echo 'No date')" "$(lowdown -X title "$1" 2>/dev/null || echo 'No title')" >> articles.html.tmp
}

start_catalogue() {
	cat _header.html - >articles.html.tmp <<EOF
<h1>Articles</h1>

<ul>
EOF
}

finish_catalogue() {
	cat - _footer.html >>articles.html.tmp <<EOF
</ul>
EOF
	filter_placeholders "Article list" "A list of articles I have written." "unavailable (autogenerated)" "$(date +%Y-%m-%d)" "articles.html" < articles.html.tmp > "$OUT/articles.html"
	rm articles.html.tmp
}

if [ ! -e "$OUT" ]; then
	echo "creating output folder"
	mkdir "$OUT"
	mkdir "$OUT/articles"
fi

echo "copying static files"
for file in $COPY; do
	cp -rv "$file" "$OUT"
done

echo "processing markdown"
for file in $PROCESS; do
	echo "explicit process: $(basename "$file")"
	process "$file" > "$OUT/${file%.*}.html"
	cp -v "$file" "$OUT"
done

echo "creating catalogue"
start_catalogue
find "$ARTICLES" -type f -name "*.md" | while read -r file; do
	echo "processing article: $(basename "$file")"
	process "$file" > "$OUT/${file%.*}.html"
	cp -v "$file" "$OUT/$file"
	add_catalogue "$file"
done
finish_catalogue

du -hs "$OUT"
echo "done."
